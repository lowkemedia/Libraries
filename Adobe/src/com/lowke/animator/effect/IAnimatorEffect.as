////  IAnimatorEffect v 1.1 - animator package//  Russell Lowke, June 30th 2013////  Copyright (c) 2006-2013 Lowke Media//  see http://www.lowkemedia.com for more information//  see http://code.google.com/p/lowke-animator/ for code repository//  see http://code.google.com/p/lowke/ for entire lowke code repository////  Permission is hereby granted, free of charge, to any person obtaining a //  copy of this software and associated documentation files (the "Software"), //  to deal in the Software without restriction, including without limitation //  the rights to use, copy, modify, merge, publish, distribute, sublicense, //  and/or sell copies of the Software, and to permit persons to whom the //  Software is furnished to do so, subject to the following conditions:// //  The above copyright notice and this permission notice shall be included in //  all copies or substantial portions of the Software.// //  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR //  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, //  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE //  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER //  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING //  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER  //  DEALINGS IN THE SOFTWARE. ////package com.lowke.animator.effect{       import com.lowke.animator.Animator;    import com.lowke.animator.Anime;        import flash.events.IEventDispatcher;        public interface IAnimatorEffect extends IEventDispatcher    {        // functions required for an Animator Effect        function initialize(animator:Animator,                            anime:Anime,                            precedence:Number = NaN):void         function resolve(updateTime:uint, forceInterval:Boolean = false):void;        function activate():void;        function update():Boolean;        function cleanup():void;        function pause():void;        function unpause():void;        function cycle():void;        function reverse():void;        function snapToEnd():void;        function dispatchEffectDone():void;        function whenDone(funct:Function):void;                function get target():IEventDispatcher;        function get name():String;        function get anime():Anime;        function get type():uint;        function get precedence():int;        function get interval():uint;        function get startTime():uint;        function get updateTime():uint;        function get timePassed():int;        function get cycles():int;                function set target(val:IEventDispatcher):void;        function set name(val:String):void;        function set type(val:uint):void;        function set interval(val:uint):void;        function set cycles(val:int):void;        function set startTime(val:uint):void;            }}