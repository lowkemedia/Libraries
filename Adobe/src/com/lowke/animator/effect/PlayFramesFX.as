////  PlayFramesFX v 1.3.1 - animator package//  Russell Lowke, June 1st 2011////  Copyright (c) 2009-2011 Lowke Media//  see http://www.lowkemedia.com for more information//  see http://code.google.com/p/lowke-animator/ for code repository////  Permission is hereby granted, free of charge, to any person obtaining a //  copy of this software and associated documentation files (the "Software"), //  to deal in the Software without restriction, including without limitation //  the rights to use, copy, modify, merge, publish, distribute, sublicense, //  and/or sell copies of the Software, and to permit persons to whom the //  Software is furnished to do so, subject to the following conditions:// //  The above copyright notice and this permission notice shall be included in //  all copies or substantial portions of the Software.// //  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR //  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, //  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE //  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER //  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING //  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER  //  DEALINGS IN THE SOFTWARE. ////// Note: the static function PlayFramesFX.getFrameNumber() is often useful for//  gettimg the frame number of a specifc label in a movieclip////  If no end frame given then the last frame of the moveClip is used//  If no start frame given then the current frame of the movieClip is used//package com.lowke.animator.effect{       import com.lowke.animator.Animator;    import com.lowke.logger.Logger;        import flash.display.DisplayObject;    import flash.display.FrameLabel;    import flash.display.MovieClip;            public class PlayFramesFX extends AnimatorEffect implements IAnimatorEffect     {        private var _frame:Number;                          // image cell currently displayed        private var _endFrame:uint;                         // frame to end on        private var _startFrame:uint;                       // frame to start on        private var _msPerFrame:Number;                     // milliseconds per frame        private var _playEveryFrame:Boolean;                // if true every frame is played regardless of frame rate        private var _duration:uint;                         // optional parameter specifying animation duration        private var _startLabel:String;                     // optional parameter specifying a label to start on        private var _endLabel:String;                       // optional parameter specifying a label to end on                // default frame rate used if stage can't be found        public static const DEFAULT_FRAME_RATE:Number = 24;                 // returned by getFrameNumber(), indicates no frame found with that label in MovieClip        public static const NO_FRAME:int = 0;                        // accessing an external static references, such as Animator, has an overhead,        //  so, for performance sake, external vars are substituted with local references        public static const TYPE_END:uint           = Animator.TYPE_END;        public static const TYPE_CYCLE:uint         = Animator.TYPE_CYCLE;        public static const PRECEDENCE_FIRST:int    = Animator.PRECEDENCE_FIRST;        public static const INTERVAL_NONE:uint      = Animator.INTERVAL_NONE;                        //        // static helper constructor methods for PlayFramesFX        //                //        // Plays clip at frameRate.        //  a negitive frameRate will cause the clip to play backwards        //  if startAtBeginning is false clip will start on its current frame        // fps() defaults to CYCLING the clip and starting from whatever frame it's on        public static function fps(frameRate:Number,                                   startAtBeginning:Boolean = false,                                   playEveryFrame:Boolean = false,                                   type:uint = TYPE_CYCLE):PlayFramesFX         {            var startFrame:uint = startAtBeginning ? 1 : 0; // 0 denotes to use the current frame            var effect:PlayFramesFX = new PlayFramesFX(startFrame, 0, frameRate, 0, playEveryFrame, type);            return effect;        }                        //        // Plays clip in duration        public static function duration(duration:uint,                                        playEveryFrame:Boolean = false,                                        type:uint = TYPE_END):PlayFramesFX         {               var effect:PlayFramesFX = new PlayFramesFX(0, 0, NaN, duration, playEveryFrame, type);            return effect;        }                        //        // Play to a frame label, even if that means playing backwards        public static function toLabel(startLabel:String = null,                                       endLabel:String = null,                                       frameRate:Number = NaN,                                       duration:uint = 0,                                       playEveryFrame:Boolean = false,                                       type:uint = TYPE_END):PlayFramesFX         {               var effect:PlayFramesFX = new PlayFramesFX(0, 0, frameRate, duration, playEveryFrame, type);            effect.startLabel = startLabel;            effect.endLabel = endLabel;            return effect;        }                //        // if you want to animate between labels use toLabel() static helper method;        // startFrame of zero will start on the current frame if +'ve frameRate, the last frame if -'ve.        // endFrame of zero will end on the last frame if +'ve frameRate, the first frame if -'ve.        // a NaN frameRate will cause the movie to play at the stage's frame rate        // a negitive frameRate will cause the clip to play backwards        // if a duration is specified it overrides frameRate.        public function PlayFramesFX(startFrame:uint = 0,                                     endFrame:uint = 0,                                     frameRate:Number = NaN,                                     duration:uint = 0,                                     playEveryFrame:Boolean = false,                                     type:uint = TYPE_END)         {               super("PlayFramesFX",                type,                 PRECEDENCE_FIRST,                 INTERVAL_NONE);                        _startFrame = startFrame;            _endFrame = endFrame;            _msPerFrame = FPStoMSPF(frameRate);            _duration = duration;            _playEveryFrame = playEveryFrame;        }                public override function activate():void         {               if (_startLabel)             {                _startFrame = getFrameNumber(_target as MovieClip, _startLabel);            }                        if (_startFrame)             {                // set the frame to the start frame                _frame = _startFrame;            }             else             {                 // set the frame to the clips current frame                _frame = _target["currentFrame"];                                // and consider the start as the beginning of the clip                _startFrame = 1;                                if (_msPerFrame < 0 || (_endFrame && _endFrame < _frame))                 {                    // unless playing backwards when the start is really the end of the clip                    _startFrame = _target["totalFrames"];                }            }                        if (_endLabel)             {                _endFrame = getFrameNumber(_target as MovieClip, _endLabel);            }                        if (! _endFrame)             {                if (_msPerFrame < 0)                 {                    // playing backwards, end on 1st frame                    _endFrame = 1;                }                 else                 {                    // playing forwards, end on last frame                    _endFrame = _target["totalFrames"];                }            }                        if (_duration)             {                var nFrames:uint = Math.abs(_endFrame - _startFrame);                if (nFrames == 0)                 {                    // avoid divide by zero                    nFrames = 1;                }                _msPerFrame = _duration/nFrames;             }             else if (! _msPerFrame)             {                 // if _msPerFrame not set then use frame rate of stage                var frameRate:Number;                if ((_target as DisplayObject).stage)                 {                    frameRate = (_target as DisplayObject).stage.frameRate;                }                 else                 {                    frameRate = DEFAULT_FRAME_RATE;                    Logger.warning("Could not find stage for clip " + _target + " so default frame rate of " + DEFAULT_FRAME_RATE + " used.", Animator.WARNING_CANT_FIND_STAGE);                }                _msPerFrame = FPStoMSPF(frameRate);            }                        // if start > end, then play backwards            _msPerFrame = Math.abs(_msPerFrame);            if (_startFrame > _endFrame)             {                _msPerFrame = -_msPerFrame;            }                        _target["gotoAndStop"](_frame);        }                        public override function update():Boolean         {              var change:Number = _timePassed/_msPerFrame;            if (_playEveryFrame)             {                if (change > 1)                 {                    change = 1;                }                 else if (change < -1)                {                    change = -1;                }            }                        _frame += change;            var frame:int = Math.floor(_frame);                        if ((_msPerFrame > 0 && frame > _endFrame) ||                 (_msPerFrame < 0 && frame < _endFrame))             {                _target["gotoAndStop"](_endFrame);                return true;            }             else             {                _target["gotoAndStop"](frame);                return false;            }        }                        public override function snapToEnd():void         {            _frame = _endFrame;            _target["gotoAndStop"](_frame);        }                public override function cycle():void         {            _frame = _startFrame;            _target["gotoAndStop"](_frame);        }                public override function reverse():void         {            var temp:uint = _endFrame;            _endFrame = _startFrame;            _startFrame = temp;            _msPerFrame = -_msPerFrame;        }                        //        // convert frames per second to miliseconds per frame        private static function FPStoMSPF(fps:Number):Number         {            if (fps == 0 || isNaN(fps))             {                return 0;   // avoid divide by zero            }             else             {                return (1000/fps);            }        }                        //        // returns the frame number of a specifc label on a MovieClip        public static function getFrameNumber(movieClip:MovieClip, label:String):uint         {            var frameLabels:Array = movieClip.currentLabels;            var nLabels:uint = frameLabels.length;            for (var i:uint = 0; i < nLabels; ++i)             {                var frameLabel:FrameLabel = frameLabels[i];                if (frameLabel.name == label)                 {                    return frameLabel.frame;                }            }            return NO_FRAME;        }                public function get frame():Number                  { return _frame; }        public function get startLabel():String             { return _startLabel; }        public function get endLabel():String               { return _endLabel; }                public function set frame(val:Number):void          { _frame = val; }        public function set startLabel(val:String):void     { _startLabel = val; }        public function set endLabel(val:String):void       { _endLabel = val; }    }}