////  AutoRotateFX v 1.0.1 - animator package//  Russell Lowke, June 1st 2011////  Copyright (c) 2009-2011 Lowke Media//  see http://www.lowkemedia.com for more information//  see http://code.google.com/p/lowke-animator/ for code repository////  Permission is hereby granted, free of charge, to any person obtaining a //  copy of this software and associated documentation files (the "Software"), //  to deal in the Software without restriction, including without limitation //  the rights to use, copy, modify, merge, publish, distribute, sublicense, //  and/or sell copies of the Software, and to permit persons to whom the //  Software is furnished to do so, subject to the following conditions:// //  The above copyright notice and this permission notice shall be included in //  all copies or substantial portions of the Software.// //  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR //  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, //  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE //  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER //  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING //  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER  //  DEALINGS IN THE SOFTWARE. ////package com.lowke.animator.effect{    import com.lowke.animator.Animator;    import com.lowke.util.NumberUtil;    import flash.display.DisplayObject;    import flash.geom.Point;        public class AutoRotateFX extends AnimatorEffect implements IAnimatorEffect     {           private var _motionObject:Object;                   // moving object being listened to to determine rotation        //  this object must have an x and y parameter        private var _angularVelocity:Number;                // degrees per tick target turns at        private var _dObj:DisplayObject;                    // target that's turning must be a DisplayObject        private var _targetRotation:Number = NaN;           // target rotation being rotated to        private var _delta:Point;                           // change in x and y        private var _rotation:Number;                       // last rotation        private var _lastX:Number;                          // last x location        private var _lastY:Number;                          // last y location                // accessing an external static references, such as Animator, has an overhead,        //  so, for performance sake, external vars are substituted with local references        public static const TYPE_PERSIST:uint       = Animator.TYPE_PERSIST;        public static const PRECEDENCE_LAST:int     = Animator.PRECEDENCE_LAST;        public static const INTERVAL_NONE:uint      = Animator.INTERVAL_NONE;                        // automatically rotates display object to face direction it's moving        public function AutoRotateFX(motionObject:DisplayObject = null,         // object being listened to for motion                                     angularVelocity:Number = 0)                // maximum angular velocity,        {               super("AutoRotateFX",                 TYPE_PERSIST,                 PRECEDENCE_LAST,            // this effect plays last after the target has moved                INTERVAL_NONE);                        _motionObject = motionObject;            _angularVelocity = angularVelocity;            _delta = new Point();        }                public override function activate():void         {               if (_target is DisplayObject)             {                _dObj = _target as DisplayObject;            }             else             {                throw new Error("AutoRotateFX effect must have a target of type DisplayObject");            }                        if (! _motionObject)             {                _motionObject = _dObj;            }                        // record last x and y            _lastX = _motionObject["x"];            _lastY = _motionObject["y"];                        // set at starting rotation, if any            _rotation = _dObj.rotation;                    }                public override function update():Boolean         {               if (_motionObject &&                 (_motionObject["x"] != _lastX || _motionObject["y"] != _lastY))             {                _delta.x = _motionObject["x"] - _lastX;                _delta.y = _motionObject["y"] - _lastY;                                _targetRotation = NumberUtil.XYToAngle(_delta.x, _delta.y);                                // record last x and y                _lastX = _motionObject["x"];                _lastY = _motionObject["y"];            }                        if (! isNaN(_targetRotation) && _rotation != _targetRotation)             {                if (_angularVelocity)                 {                    var mod:int = incOrDec(_rotation, _targetRotation, 360);                    _rotation = cleanAngle(_rotation + _angularVelocity*_timePassed*mod);                                        // check if overshot target                    if (incOrDec(_rotation, _targetRotation, 360) == 0 - mod)                     {                         _rotation = _targetRotation;                     }                }                 else                 {                    _rotation = _targetRotation;                }                                _dObj.rotation = _rotation;                                if (_rotation == _targetRotation)                 {                    // once target rotation reached, clear it                    _targetRotation = NaN;                }            }                        return false;        }                public static function cleanAngle(angle:Number):Number         {            angle %= 360;            if (angle < 0)             {                 return 360 + angle;             }            return angle;        }                //        // given a looping sequence in both directions with a range of max        // if at n which direction (+ or -) is quickest to get to dest        public static function incOrDec(n:uint, dest:uint, max:uint):int         {            // ensure integers                        var inc:int = 0;            var dec:int = 0;                        if (n == dest)             {                return 0;            }             else if (n < dest)             {                inc = dest - n;                dec = n + (max - dest);            }             else if (n > dest)             {                inc = dest + (max - n);                dec = n - dest;            }                        if (inc > dec)             {                return -1;            }             else             {                return +1;            }        }                public function get angularVelocity():Number            { return _angularVelocity; }        public function get motionObject():Object               { return _motionObject; }                public function set angularVelocity(val:Number):void    { _angularVelocity = val; }        public function set motionObject(val:Object):void       { _motionObject = val; }    }}