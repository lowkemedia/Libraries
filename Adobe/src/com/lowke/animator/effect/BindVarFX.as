////  BindVarFX v 1.1 - animator package//  Russell Lowke, September 24th 2008////  Copyright (c) 2008 Lowke Media//  see http://www.lowkemedia.com for more information//  see http://code.google.com/p/lowke-animator/ for code repository////  Permission is hereby granted, free of charge, to any person obtaining a //  copy of this software and associated documentation files (the "Software"), //  to deal in the Software without restriction, including without limitation //  the rights to use, copy, modify, merge, publish, distribute, sublicense, //  and/or sell copies of the Software, and to permit persons to whom the //  Software is furnished to do so, subject to the following conditions:// //  The above copyright notice and this permission notice shall be included in //  all copies or substantial portions of the Software.// //  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR //  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, //  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE //  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER //  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING //  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER  //  DEALINGS IN THE SOFTWARE. ////package com.lowke.animator.effect{    import com.lowke.animator.Animator;        public class BindVarFX extends AnimatorEffect implements IAnimatorEffect     {           private var _sourceObj:Object;          // DisplayObject this _anime is bound to        private var _sourceVar:String;        private var _targetObj:Object;        private var _targetVar:String;        private var _filterFunction:Function;   // filter function used to modify value                // accessing an external static references, such as Animator, has an overhead,        //  so, for performance sake, external vars are substituted with local references        public static const TYPE_PERSIST:uint       = Animator.TYPE_PERSIST;        public static const PRECEDENCE_LATER:int    = Animator.PRECEDENCE_LATER;        public static const INTERVAL_NONE:uint      = Animator.INTERVAL_NONE;                        public function BindVarFX(sourceVar:String,                                  source:Object,                                  targetVar:String = null,                                  target:Object = null,                                  filterFunction:Function = null)         {               // if no targetVar supplied then make it the sourceVar            if (! targetVar)             {                targetVar = sourceVar;            }                        super("BindVarFX_" + _targetVar, TYPE_PERSIST, PRECEDENCE_LATER, INTERVAL_NONE);                        _sourceVar = sourceVar;            _sourceObj = source;            _targetVar = targetVar;            _targetObj = target;            _filterFunction = filterFunction;        }                public override function activate():void         {               // if no target object supplied then use the Anime target            if (! _targetObj)             {                _targetObj = _target;            }        }                public override function update():Boolean         {               if (_filterFunction != null)             {                // use the filter function if found...                _targetObj[_targetVar] = _filterFunction(_sourceObj[_sourceVar]);            }             else             {                // ...otherwise bind the two values                _targetObj[_targetVar] = _sourceObj[_sourceVar];            }                        return false;        }    }}